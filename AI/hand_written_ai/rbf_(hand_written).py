# -*- coding: utf-8 -*-
"""rbf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14SzPzBv-J8cK0U1DntGz2Qc-XOndalu8
"""

import numpy as np
import matplotlib.pyplot as plt

class RBFNet:
  def __init__(self, k=2, lr=0.01, epochs=100):
        self.k = k
        self.lr = lr
        self.epochs = epochs
        self.w = np.random.randn(k)
        self.b = np.random.randn(1)

  def rbf(self,x, c, s):
    return np.exp(-1 / (2 * s**2) * (x-c)**2)

  def fit(self, X, y):
    self.centers = [1,2]
    self.stds = [0.5,1]
    for epoch in range(self.epochs):
      for i in range(len(X)):
        # forward pass
        a = np.array([self.rbf(X[i], c, s) for c, s, in zip(self.centers, self.stds)])

        F = a.T.dot(self.w) + self.b
        loss = (y[i] - F) ** 2
        # backward pass
        error = -(y[i] - F)
        # online update
        self.w = self.w - self.lr * a * error
        self.b = self.b - self.lr * error

  def predict(self, X):
    y_pred = []
    for i in range(len(X)):
        a = np.array([self.rbf(X[i], c, s) for c, s, in zip(self.centers, self.stds)])
        F = a.T.dot(self.w) + self.b
        y_pred.append(F)
    return np.array(y_pred)

X =[]
y=[]
for i in range(0,99):
  X.append(0.07*i)
  y.append(np.sin(0.07*i))
print(X)
print(y)

rbfnet1 = RBFNet(lr = 0.01, k =2)
rbfnet1.fit(X, y)
y_pred = rbfnet1.predict(X)

plt.plot(X, y, '-o', label='true')
plt.plot(X, y_pred, '-o', label='RBF-Net')
plt.legend()
plt.show()